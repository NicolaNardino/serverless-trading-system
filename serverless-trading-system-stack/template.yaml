AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-trading-system SAM stack
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60

Parameters:
  tradesStoreTableName:
    Type: String
    Default: TradesStore
  MarketDataTableName:
    Type: String
    Default: MarketData
  TopicName:
    Type: String
    Default: OrdersDispatcherTopic
  TradesStorageS3BucketName:
    Type: String
    Default: serverless-trades-storage
  MarketDataS3BucketName:
    Type: String
    Default: serverless-market-data
  EventBusName:
    Type: String
    Default: trading-system-event-bus
  FargateMarketDataServicesBaseURL:
    Type: String
    Default: xxx

Resources:
  BusType:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /trading-system/dev/bus-type
      Type: String
      Value: EVENT-BRIDGE
      Description: SNS or EVENT-BRIDGE
  DarkPoolTickersList:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /trading-system/dev/dark-pool-tickers-list
      Type: StringList
      Value: FB,AMD,AMZN,APPL,NVDA,MO,GOOG,F,T,VTI
      Description: Orders with these tickers get sent to Dark Pools.
  DarkPoolsList:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /trading-system/dev/dark-pools
      Type: StringList
      Value: INSTINET,POSIT,LIQUIDNET,CHI-X,CROSS-FINDER,SIGMA-X,GETCO
      Description: List of Dark Pools
  LitPoolsList:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /trading-system/dev/lit-pools
      Type: StringList
      Value: IEX,ISLAND,BATS,BAT.BYX,EDGX,EDGA,NASDAQ,NASDAQ.ARCA,EBS
      Description: List of Lit Pools
      
  DataExtractorAPIDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: DataExtractorAPI
  SmartOrderRouterAPIDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: SmartOrderRouterAPI
  MarketDataManagerAPIDeployment:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'src/resources/various/marketDataManagerOpenAPI.yaml'

  DDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: !Ref tradesStoreTableName
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  
  MarketDataTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: !Ref MarketDataTableName
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 12

  TradesStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref TradesStorageS3BucketName
  MarketDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref MarketDataS3BucketName
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventBusName
  OrdersDispatcherTopic:
   Type: AWS::SNS::Topic
   Properties:
     TopicName: !Ref TopicName
  TradesDataAggregatorLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: TradesDataAggregator
      CodeUri: dist/lambdas/tradesDataAggregator/
      Handler: tradesDataAggregator.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
      # Read more about SAM policy templates here
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaDynamoDBExecutionRole
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
      Environment:
        Variables:
          tradesStoreTableName: !Ref DDBTable
      Architectures:
        - x86_64
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DDBTable.StreamArn
            BatchSize: 100
            StartingPosition: LATEST
  DataExtractorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DataExtractor
      CodeUri: dist/lambdas/dataExtractor/
      Handler: dataExtractor.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - DynamoDBReadPolicy: 
            TableName: !Ref DDBTable
      Environment:
        Variables:
          tradesStoreTableName: !Ref DDBTable
      Architectures:
        - x86_64
      Events:
        DataExtractorAPI:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref DataExtractorAPIDeployment
  SmartOrderRouterLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SmartOrderRouter
      CodeUri: dist/lambdas/smartOrderRouter/
      Handler: smartOrderRouter.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref DDBTable
        - DynamoDBReadPolicy:
            TableName: !Ref MarketDataTable
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName 
        - StepFunctionsExecutionPolicy:
            StateMachineName: MarketDataManagerParallelStateMachine #just the name.
      Environment:
        Variables:
          tradesStoreTableName: !Ref DDBTable
          marketDataTableName: !Ref MarketDataTable
          ordersDispatcherTopicArn: !Ref OrdersDispatcherTopic
          eventBusName: !Ref EventBusName
          parallelMarketDataManagerStateMachine: !Ref MarketDataManagerParallelStateMachine
          marketDataStepFunctionInvokeMode: StepFunctionAPIs #or EventBridge
      Architectures:
        - x86_64
      Events:
        SmartOrderRouterAPI:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref SmartOrderRouterAPIDeployment
  LitPoolMatchingEngineLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LitPoolMatchingEngine
      CodeUri: dist/lambdas/litPoolMatchingEngine/
      Handler: litPoolMatchingEngine.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          eventBusName: !Ref EventBus
          fargateMarketDataServicesBaseURL: !Ref FargateMarketDataServicesBaseURL
      Architectures:
        - x86_64
  LitPoolMatchingEngineLegacyLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LitPoolMatchingEngineLegacy
      CodeUri: src/lambdas/legacy/litPoolMatchingEngine/
      Handler: litPoolMatchingEngine.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          eventBusName: !Ref EventBus
          fargateMarketDataServicesBaseURL: !Ref FargateMarketDataServicesBaseURL
      Architectures:
        - x86_64
  DarkPoolMatchingEngineLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DarkPoolMatchingEngine
      CodeUri: dist/lambdas/darkPoolMatchingEngine/
      Handler: darkPoolMatchingEngine.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          eventBusName: !Ref EventBus
          fargateMarketDataServicesBaseURL: !Ref FargateMarketDataServicesBaseURL
      Architectures:
        - x86_64
  DarkPoolMatchingEngineLegacyLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DarkPoolMatchingEngineLegacy
      CodeUri: src/lambdas/legacy/darkPoolMatchingEngine/
      Handler: darkPoolMatchingEngine.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          eventBusName: !Ref EventBus
          fargateMarketDataServicesBaseURL: !Ref FargateMarketDataServicesBaseURL
      Architectures:
        - x86_64
  AvailableFundsRaiserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AvailableFundsRaiser
      CodeUri: dist/lambdas/availableFundsRaiser/
      Handler: availableFundsRaiser.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
      Environment:
        Variables:
          tradesStoreTableName: !Ref DDBTable
      Architectures:
        - x86_64
  AvailableFundsRaiserLegacyLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AvailableFundsRaiserLegacy
      CodeUri: src/lambdas/legacy/availableFundsRaiser/
      Handler: availableFundsRaiser.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
      Environment:
        Variables:
          tradesStoreTableName: !Ref DDBTable
      Architectures:
        - x86_64
  PostTradeProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostTradeProcessor
      CodeUri: dist/lambdas/postTradeProcessor/
      Handler: postTradeProcessor.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies:
        - S3WritePolicy:
            BucketName: !Ref TradesStorageS3BucketName
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          tradesStoreTableName: !Ref DDBTable
          bucketName: !Ref TradesStorageS3BucketName
          eventBusName: !Ref EventBus
      Architectures:
        - x86_64
  PostTradeProcessorLegacyLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostTradeProcessorLegacy
      CodeUri: src/lambdas/legacy/postTradeProcessor/
      Handler: postTradeProcessor.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies:
        - S3WritePolicy:
            BucketName: !Ref TradesStorageS3BucketName
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          tradesStoreTableName: !Ref DDBTable
          bucketName: !Ref TradesStorageS3BucketName
          eventBusName: !Ref EventBus
      Architectures:
        - x86_64
  TradesStorageAnalyzerLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: TradesStorageAnalyzer
      CodeUri: dist/lambdas/tradesStorageAnalyzer/
      Handler: tradesStorageAnalyzer.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref TradesStorageS3BucketName
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref TradesStorageBucket
            Events: s3:ObjectCreated:*
      Architectures:
        - x86_64
  QuoteSummaryManagerLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: QuoteSummaryManager
      CodeUri: dist/lambdas/marketData/quoteSummaryManager/
      Handler: quoteSummaryManager.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies:
        - S3WritePolicy:
            BucketName: !Ref MarketDataBucket
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - DynamoDBWritePolicy: 
            TableName: !Ref MarketDataTable
      Environment:
        Variables:
          bucketName: !Ref MarketDataS3BucketName
          eventBusName: !Ref EventBus
          marketDataTableName: !Ref MarketDataTable
      Architectures:
        - x86_64
  HistoricalDataManagerLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: HistoricalDataManager
      CodeUri: dist/lambdas/marketData/historicalDataManager/
      Handler: historicalDataManager.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies:
        - S3WritePolicy:
            BucketName: !Ref MarketDataBucket
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - DynamoDBWritePolicy: 
            TableName: !Ref MarketDataTable
        - DynamoDBReadPolicy: 
            TableName: !Ref MarketDataTable
      Environment:
        Variables:
          bucketName: !Ref MarketDataS3BucketName
          eventBusName: !Ref EventBus
          marketDataTableName: !Ref MarketDataTable
      Architectures:
        - x86_64
  DetermineIfDataRetrievedPostMapStateLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: DetermineIfDataRetrievedPostMapState
      CodeUri: dist/lambdas/marketData/determineIfDataRetrievedPostMapState/
      Handler: determineIfDataRetrievedPostMapState.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Architectures:
        - x86_64
  ProcessNewlyRetrievedDataLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: ProcessNewlyRetrievedData
      CodeUri: dist/lambdas/marketData/processNewlyRetrievedData/
      Handler: processNewlyRetrievedData.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies:
        - DynamoDBWritePolicy: 
            TableName: !Ref MarketDataTable
        - DynamoDBReadPolicy: 
            TableName: !Ref MarketDataTable
      Environment:
        Variables:
          marketDataTableName: !Ref MarketDataTable
      Architectures:
        - x86_64
  HistoricalDataAndQuoteSummaryManagerLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: HistoricalDataAndQuoteSummaryManager
      CodeUri: dist/lambdas/marketData/historicalDataAndQuoteSummaryManager/
      Handler: historicalDataAndQuoteSummaryManager.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies:
        - S3WritePolicy:
            BucketName: !Ref MarketDataBucket
        - DynamoDBWritePolicy: 
            TableName: !Ref MarketDataTable
        - DynamoDBReadPolicy: 
            TableName: !Ref MarketDataTable
      Environment:
        Variables:
          bucketName: !Ref MarketDataS3BucketName
          eventBusName: !Ref EventBus
          marketDataTableName: !Ref MarketDataTable
      Architectures:
        - x86_64
  NoHistoricalDataRetrievedLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NoHistoricalDataRetrieved
      CodeUri: dist/lambdas/marketData/noHistoricalDataRetrieved/
      Handler: noHistoricalDataRetrieved.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          eventBusName: !Ref EventBusName
      Architectures:
        - x86_64
  NoHistoricalDataRetrievedExternalManagerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NoHistoricalDataRetrievedExternalManager
      CodeUri: dist/lambdas/marketData/noHistoricalDataRetrievedExternalManager/
      Handler: noHistoricalDataRetrievedExternalManager.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs16.x
      Policies: 
        - Statement:
          - Effect: Allow
            Action:
              - states:SendTaskSuccess
            Resource: '*'
      Environment:
        Variables:
          eventBusName: !Ref EventBusName
      Architectures:
        - x86_64
  SamTradingSystemLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: sam-trading-system-lambda-layer
            Description: Dependencies for sam-trading-system
            ContentUri: dist/layers/common
            CompatibleRuntimes:
              - nodejs16.x
            CompatibleArchitectures:
              - x86_64
            RetentionPolicy: Retain
  
  OrdersDispatcherTopicLitPoolMatchingEngineLegacyLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LitPoolMatchingEngineLegacyLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        poolType:
          - Lit
  OrdersDispatcherTopicDarkPoolMatchingEngineLegacyLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt DarkPoolMatchingEngineLegacyLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        poolType:
          - Dark
  OrdersDispatcherTopicAvailableFundsRaiserLegacyLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt AvailableFundsRaiserLegacyLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        invalidOrders:
          - CreditCheck
  OrdersDispatcherTopicPostTradeProcessorLegacyLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt PostTradeProcessorLegacyLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        postTrade:
          - "True"

  LitPoolsOrdersRule:
    Type: AWS::Events::Rule
    Properties:
      Name: LitPoolsOrders
      Description: Forward orders coming from SmartOrderRouter or DarkPoolMatchingEngine to LitPoolMatchingEngine.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
          - "DarkPoolMatchingEngine"
        detail-type:
          - Orders
        detail: 
          poolType: 
            - "Lit"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LitPoolMatchingEngineLambda"
              - "Arn"
          Id: "LitPoolMatchingEngineTarget"
  LitPoolsOrdersLegacyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: LitPoolsOrdersLegacy
      Description: Forward orders coming from SmartOrderRouter or DarkPoolMatchingEngine to LitPoolMatchingEngine.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
          - "DarkPoolMatchingEngine"
        detail-type:
          - Orders
        detail: 
          poolType: 
            - "LitLegacy" #Don't want this rule to execute, in normal circumstances, when the non-legacy version is active.
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LitPoolMatchingEngineLegacyLambda"
              - "Arn"
          Id: "LitPoolMatchingEngineTarget"
          InputPath: "$.detail.orders"
  DarkPoolsOrdersRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DarkPoolsOrders
      Description: Forward orders coming from SmartOrderRouter to DarkPoolMatchingEngine.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
        detail-type:
          - Orders
        detail: 
          poolType: 
            - "Dark"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "DarkPoolMatchingEngineLambda"
              - "Arn"
          Id: "DarkPoolMatchingEngineTarget"
  DarkPoolsOrdersLegacyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DarkPoolsOrdersLegacy
      Description: Forward orders coming from SmartOrderRouter to DarkPoolMatchingEngine.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
        detail-type:
          - Orders
        detail: 
          poolType: 
            - "DarkLegacy" #Don't want this rule to execute, in normal circumstances, when the non-legacy version is active.
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "DarkPoolMatchingEngineLegacyLambda"
              - "Arn"
          Id: "DarkPoolMatchingEngineLegacyTarget"
          InputPath: "$.detail.orders"
  AvailableFundsRaiserRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AvailableFundsRaiser
      Description: Forward SmartOrderRouter orders with customers credit check failed to AvailableFundsRaiser.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
        detail-type:
          - Orders
        detail: 
          invalidOrders: 
            - "CreditCheck"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "AvailableFundsRaiserLambda"
              - "Arn"
          Id: "AvailableFundsRaiserTarget"

  AvailableFundsRaiserLegacyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AvailableFundsRaiserLegacy
      Description: Forward SmartOrderRouter orders with customers credit check failed to AvailableFundsRaiser.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
        detail-type:
          - Orders
        detail: 
          invalidOrders: 
            - "CreditCheckLegacy" #Don't want this rule to execute, in normal circumstances, when the non-legacy version is active.
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "AvailableFundsRaiserLegacyLambda"
              - "Arn"
          Id: "AvailableFundsRaiserLegacyTarget"
          InputPath: "$.detail.orders"
  
  PostTradeProcessorRule:
    Type: AWS::Events::Rule
    Properties:
      Name: PostTradeProcessor
      Description: Post processes trades coming from Dark or Lit pool matching engines.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "LitPoolMatchingEngine"
          - "DarkPoolMatchingEngine"
        detail-type:
          - Trades
        detail: 
          postTrade: 
            - "True"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "PostTradeProcessorLambda"
              - "Arn"
          Id: "PostTradeProcessorTarget"
  
  PostTradeProcessorLegacyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: PostTradeProcessorLegacy
      Description: Post processes trades coming from Dark or Lit pool matching engines.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "LitPoolMatchingEngine"
          - "DarkPoolMatchingEngine"
        detail-type:
          - Trades
        detail: 
          postTrade: 
            - "TrueLegacy" #Don't want this rule to execute, in normal circumstances, when the non-legacy version is active.
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "PostTradeProcessorLegacyLambda"
              - "Arn"
          Id: "PostTradeProcessorLegacyTarget"
          InputPath: "$.detail.trades"
  NoHistoricalDataRetrievedExternalManagerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: NoHistoricalDataRetrievedExternalManager
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "MarketDataManagerStepFunction"
        detail-type:
          - "NoHistoricalDataRetrieved"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "NoHistoricalDataRetrievedExternalManagerLambda"
              - "Arn"
          Id: "NoHistoricalDataRetrievedExternalManagerTarget"
  # Provide permission for EventBridge to invoke the Lambda function
  LitPoolMatchingEngineLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LitPoolMatchingEngineLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "LitPoolsOrdersRule"
          - "Arn"
  LitPoolMatchingEngineLegacyLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LitPoolMatchingEngineLegacyLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "LitPoolsOrdersLegacyRule"
          - "Arn"
  DarkPoolMatchingEngineLambdaEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "DarkPoolMatchingEngineLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "DarkPoolsOrdersRule"
          - "Arn"
  DarkPoolMatchingEngineLegacyLambdaEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "DarkPoolMatchingEngineLegacyLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "DarkPoolsOrdersLegacyRule"
          - "Arn"
  AvailableFundsRaiserLegacyLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "AvailableFundsRaiserLegacyLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "AvailableFundsRaiserLegacyRule"
          - "Arn"
  AvailableFundsRaiserLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "AvailableFundsRaiserLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "AvailableFundsRaiserRule"
          - "Arn"
  PostTradeProcessorLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "PostTradeProcessorLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "PostTradeProcessorRule"
          - "Arn"
  PostTradeProcessorLegacyLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "PostTradeProcessorLegacyLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "PostTradeProcessorLegacyRule"
          - "Arn"
  NoHistoricalDataRetrievedExternalManagerLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "NoHistoricalDataRetrievedExternalManagerLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "NoHistoricalDataRetrievedExternalManagerRule"
          - "Arn"
  # Provide permission for SNS to invoke the Lambda function
  LitPoolMatchingEngineLegacyLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LitPoolMatchingEngineLegacyLambda
      Principal: sns.amazonaws.com
  DarkPoolMatchingEngineLambdaLegacyInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DarkPoolMatchingEngineLegacyLambda
      Principal: sns.amazonaws.com
  AvailableFundsRaiserLegacyLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AvailableFundsRaiserLegacyLambda
      Principal: sns.amazonaws.com
  PostTradeProcessorLegacyLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PostTradeProcessorLegacyLambda
      Principal: sns.amazonaws.com
  
  # Step Functions
  # Market Data Manager used within the order management workflow
  MarketDataManagerStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt QuoteSummaryManagerLambda.Arn
                  - !GetAtt HistoricalDataManagerLambda.Arn
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  LogGroupMarketDataManagerStateMachine:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/states/MarketDataManagerStateMachineLogGroup"

  MarketDataManagerStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: src/resources/stateMachines/marketDataManagerStateMachine.json
      DefinitionSubstitutions:
        QuoteSummaryManagerLambda: !GetAtt QuoteSummaryManagerLambda.Arn
        HistoricalDataManagerLambda: !GetAtt HistoricalDataManagerLambda.Arn
      Tracing:
        Enabled: true
      Role: !GetAtt MarketDataManagerStateMachineExecutionRole.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt  LogGroupMarketDataManagerStateMachine.Arn
        IncludeExecutionData: TRUE
        Level: "ALL"
      Type: "STANDARD"
      Name: "MarketDataManagerStateMachine"

  MarketDataManagerStateMachineEventRuleExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CallMarketDataManagerStateMachine
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref MarketDataManagerStateMachine

  MarketDataManagerStateMachineRule:
    Type: AWS::Events::Rule
    Properties:
      Name: MarketDataManagerStateMachine
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
        detail-type:
          - MarketData
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "MarketDataManagerStateMachine"
              - "Arn"
          Id: "MarketDataManagerStateMachineTarget"
          RoleArn: !GetAtt MarketDataManagerStateMachineEventRuleExecutionRole.Arn
  
  # Market data manager used called from API Gateway
  MarketDataManagerParallelStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: src/resources/stateMachines/marketDataManagerParallelStateMachine.json
      DefinitionSubstitutions:
        HistoricalDataAndQuoteSummaryManagerLambda: !GetAtt HistoricalDataAndQuoteSummaryManagerLambda.Arn
        DetermineIfDataRetrievedPostMapStateLambda: !GetAtt DetermineIfDataRetrievedPostMapStateLambda.Arn
        ProcessNewlyRetrievedDataLambda: !GetAtt ProcessNewlyRetrievedDataLambda.Arn
        NoHistoricalDataRetrievedLambda: !GetAtt NoHistoricalDataRetrievedLambda.Arn
        EventBusName: !Ref EventBusName
      Tracing:
        Enabled: true
      Role: !GetAtt MarketDataManagerParallelStateMachineExecutionRole.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt  LogGroupMarketDataManagerParallelStateMachine.Arn
        IncludeExecutionData: TRUE
        Level: "ALL"
      Type: "STANDARD"
      Name: "MarketDataManagerParallelStateMachine"

  MarketDataManagerParallelStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt HistoricalDataAndQuoteSummaryManagerLambda.Arn
                  - !GetAtt DetermineIfDataRetrievedPostMapStateLambda.Arn
                  - !GetAtt ProcessNewlyRetrievedDataLambda.Arn
                  - !GetAtt NoHistoricalDataRetrievedLambda.Arn
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt EventBus.Arn
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  ApiGatewayMarketDataManagerStartExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: ApiGatewayMarketDataManagerStartExecution
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: "states:StartExecution"
              Resource: !GetAtt MarketDataManagerParallelStateMachine.Arn

  LogGroupMarketDataManagerParallelStateMachine:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/states/MarketDataManagerParallelStateMachineLogGroup"

Outputs:
  OrdersDispatcherTopicARN:
    Description: OrdersDispatcherTopic ARN
    Value: !Ref OrdersDispatcherTopic
  TradesStorageBucketInfo:
    Value: !Ref TradesStorageBucket
    Description: S3 Bucket for trades storage
  SmartOrderRouterAPIDeploymentInfo:
    Value: !Ref SmartOrderRouterAPIDeployment
    Description: Smart Order Router API Deployment
  EventBusInfo:
    Value: !Ref EventBus
    Description: Event Bus
  MarketDataManagerParallelStateMachineARN:
    Value: !GetAtt MarketDataManagerParallelStateMachine.Arn   