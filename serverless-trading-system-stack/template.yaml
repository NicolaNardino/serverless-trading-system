AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-trading-system SAM stack
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  DDBTableName:
    Type: String
    Default: TradesStore
  TopicName:
    Type: String
    Default: OrdersDispatcherTopic
  TradesStorageS3BucketName:
    Type: String
    Default: serverless-trades-storage
  EventBusName:
    Type: String
    Default: trading-system-event-bus-1

Resources:
  DataExtractorAPIDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: DataExtractorAPI
  SmartOrderRouterAPIDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: SmartOrderRouterAPI

  DDBTable:
    Type: AWS::DynamoDB::Table
    #DeletionPolicy: Retain
    Properties:
      TableName: !Ref DDBTableName
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  
  TradesStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref TradesStorageS3BucketName    
  
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventBusName

  TradesDataAggregatorLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: TradesDataAggregator
      CodeUri: aws/src/lambdas/tradesDataAggregator/
      Handler: tradesDataAggregator.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs14.x
      Policies: 
      # Read more about SAM policy templates here
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaDynamoDBExecutionRole
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
      Environment:
        Variables:
          ddbTableName: !Ref DDBTable
      Architectures:
        - x86_64
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DDBTable.StreamArn
            BatchSize: 100
            StartingPosition: LATEST
  DataExtractorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DataExtractor
      CodeUri: aws/src/lambdas/dataExtractor/
      Handler: dataExtractor.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs14.x
      Policies: 
        - DynamoDBReadPolicy: 
            TableName: !Ref DDBTable
      Environment:
        Variables:
          ddbTableName: !Ref DDBTable
      Architectures:
        - x86_64
      Events:
        DataExtractorAPI:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref DataExtractorAPIDeployment
  SmartOrderRouterLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SmartOrderRouter
      CodeUri: aws/src/lambdas/smartOrderRouter/
      Handler: smartOrderRouter.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs14.x
      Policies: 
        - DynamoDBReadPolicy: 
            TableName: !Ref DDBTable
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          ddbTableName: !Ref DDBTable
          ordersDispatcherTopicArn: !Ref OrdersDispatcherTopic
          eventBusName: !Ref EventBusName
      Architectures:
        - x86_64
      Events:
        SmartOrderRouterAPI:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref SmartOrderRouterAPIDeployment
  LitPoolMatchingEngineLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LitPoolMatchingEngine
      CodeUri: aws/src/lambdas/litPoolMatchingEngine/
      Handler: litPoolMatchingEngine.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs14.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          eventBusName: !Ref EventBus
      Architectures:
        - x86_64
  DarkPoolMatchingEngineLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DarkPoolMatchingEngine
      CodeUri: aws/src/lambdas/darkPoolMatchingEngine/
      Handler: darkPoolMatchingEngine.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs14.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          eventBusName: !Ref EventBus
      Architectures:
        - x86_64
  AvailableFundsRaiserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AvailableFundsRaiser
      CodeUri: aws/src/lambdas/availableFundsRaiser/
      Handler: availableFundsRaiser.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs14.x
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
      Environment:
        Variables:
          ddbTableName: !Ref DDBTable
      Architectures:
        - x86_64
  PostTradeProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostTradeProcessor
      CodeUri: aws/src/lambdas/postTradeProcessor/
      Handler: postTradeProcessor.handler
      Layers:
        - !Ref SamTradingSystemLayer
      Runtime: nodejs14.x
      Policies:
        - S3WritePolicy:
            BucketName: !Ref TradesStorageS3BucketName
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - SNSPublishMessagePolicy:
            TopicName: !Ref TopicName
        - DynamoDBWritePolicy: 
            TableName: !Ref DDBTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBusName
      Environment:
        Variables:
          ddbTableName: !Ref DDBTable
          bucketName: !Ref TradesStorageS3BucketName
          eventBusName: !Ref EventBus
      Architectures:
        - x86_64
        
  OrdersDispatcherTopic:
   Type: AWS::SNS::Topic
   Properties:
     TopicName: !Ref TopicName

  OrdersDispatcherTopicLitPoolMatchingEngineLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LitPoolMatchingEngineLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        PoolType:
          - Lit
  OrdersDispatcherTopicDarkPoolMatchingEngineLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt DarkPoolMatchingEngineLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        PoolType:
          - Dark
  OrdersDispatcherTopicAvailableFundsRaiserLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt AvailableFundsRaiserLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        InvalidOrders:
          - CreditCheck
  OrdersDispatcherTopicPostTradeProcessorLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt PostTradeProcessorLambda.Arn
      Protocol: lambda
      TopicArn: !Ref OrdersDispatcherTopic
      FilterPolicy:
        PostTrade:
          - "True"

  LitPoolsOrdersRule:
    Type: AWS::Events::Rule
    Properties:
      Name: LitPoolsOrders
      Description: Forward orders coming from SmartOrderRouter or DarkPoolMatchingEngine to LitPoolMatchingEngine.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
          - "DarkPoolMatchingEngine"
        detail-type:
          - Orders
        detail: 
          PoolType: 
            - "Lit"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LitPoolMatchingEngineLambda"
              - "Arn"
          Id: "LitPoolMatchingEngineTarget"
          InputPath: "$.detail.Orders"
  DarkPoolsOrdersRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DarkPoolsOrders
      Description: Forward orders coming from SmartOrderRouter to DarkPoolMatchingEngine.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
        detail-type:
          - Orders
        detail: 
          PoolType: 
            - "Dark"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "DarkPoolMatchingEngineLambda"
              - "Arn"
          Id: "DarkPoolMatchingEngineTarget"
          InputPath: "$.detail.Orders"
  AvailableFundsRaiserRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AvailableFundsRaiser
      Description: Forward SmartOrderRouter orders with customers credit check failed to AvailableFundsRaiser.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "SmartOrderRouter"
        detail-type:
          - Orders
        detail: 
          InvalidOrders: 
            - "CreditCheck"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "AvailableFundsRaiserLambda"
              - "Arn"
          Id: "AvailableFundsRaiserTarget"
          InputPath: "$.detail.Orders"
  PostTradeProcessorRule:
    Type: AWS::Events::Rule
    Properties:
      Name: PostTradeProcessor
      Description: Post processes trades coming from Dark or Lit pool matching engines.
      EventBusName: !Ref EventBus
      EventPattern: 
        source: 
          - "LitPoolMatchingEngine"
          - "DarkPoolMatchingEngine"
        detail-type:
          - Trades
        detail: 
          PostTrade: 
            - "True"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "PostTradeProcessorLambda"
              - "Arn"
          Id: "PostTradeProcessorTarget"
          InputPath: "$.detail.Trades"
  # Provide permission for EventBridre to invoke the Lambda function
  LitPoolMatchingEngineLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LitPoolMatchingEngineLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "LitPoolsOrdersRule"
          - "Arn"
  DarkPoolMatchingEngineLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "DarkPoolMatchingEngineLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "DarkPoolsOrdersRule"
          - "Arn"
  AvailableFundsRaiserLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "AvailableFundsRaiserLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "AvailableFundsRaiserRule"
          - "Arn"
  PostTradeProcessorLambdaEventsInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "PostTradeProcessorLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "PostTradeProcessorRule"
          - "Arn"
  # Provide permission for SNS to invoke the Lambda function
  LitPoolMatchingEngineLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LitPoolMatchingEngineLambda
      Principal: sns.amazonaws.com
  DarkPoolMatchingEngineLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DarkPoolMatchingEngineLambda
      Principal: sns.amazonaws.com
  AvailableFundsRaiserLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AvailableFundsRaiserLambda
      Principal: sns.amazonaws.com
  PostTradeProcessorLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PostTradeProcessorLambda
      Principal: sns.amazonaws.com

  SamTradingSystemLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: sam-trading-system-lambda-layer
            Description: Dependencies for sam-trading-system
            ContentUri: dependencies/
            CompatibleRuntimes:
              - nodejs14.x
            CompatibleArchitectures:
              - x86_64
            RetentionPolicy: Retain

Outputs:
  OrdersDispatcherTopicARN:
    Description: OrdersDispatcherTopic ARN
    Value: !Ref OrdersDispatcherTopic
  TradesStorageBucketInfo:
    Value: !Ref TradesStorageBucket
    Description: S3 Bucket for trades storage
  SmartOrderRouterAPIDeploymentInfo:
    Value: !Ref SmartOrderRouterAPIDeployment
    Description: Smart Order Router API Deployment
  EventBusInfo:
    Value: !Ref EventBus
    Description: Event Bus